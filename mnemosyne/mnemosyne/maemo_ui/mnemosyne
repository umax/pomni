#!/usr/bin/python -tt
# vim: sw=4 ts=4 expandtab ai
#
# Mnemosyne. Learning tool based on spaced repetition technique
#
# Copyright (C) 2008 Pomni Development Team <pomni@googlegroups.com>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2 as published by the
# Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#

"""
Main
"""

import os
import sys
import gettext
gettext.textdomain('mnemosyne')

# add mnemosyne directory to Python path in debug mode
if os.path.basename(sys.argv[0]).endswith("debug"):
    sys.path.insert(0, "../../")
    sys.path.insert(0, "../")

# turn on lazy imports
#from mnemosyne.maemo_ui import importer
#importer.install()

from optparse import OptionParser
from mnemosyne.version import version
from mnemosyne.maemo_ui.factory import app_factory

# register OSSO DBUS service if applicable
try:
    import osso
except ImportError:
    pass
else:
    SERV = osso.Context("org.mnemosyneproj.mnemosyne", version, False)

def parse_commandline(argv):
    """ Parse commandline, check options """

    parser = OptionParser(usage = "%prog [options]")

    parser.add_option("-u", "--ui", help="ui type", default="hildon")
    parser.add_option("-d", "--datadir", help="data directory")
    parser.add_option("-m", "--mode", help="working mode. "\
                      "'main', 'input', 'review', 'statistics' or 'configure'")

    return parser.parse_args(argv)

def main(argv):
    """ Main """

    opts, argv = parse_commandline(argv)

    if opts.datadir:
        basedir = os.path.abspath(opts.datadir)
    elif "MYDOCSDIR" in os.environ and os.path.exists(os.path.join(\
            os.environ["MYDOCSDIR"], ".documents")):
        basedir = os.path.join(os.environ['MYDOCSDIR'], ".documents/mnemosyne")
    elif os.path.exists(os.path.join(os.getcwdu(), ".mnemosyne")):
        basedir = os.path.abspath(os.path.join(os.getcwdu(), ".mnemosyne"))
    else:
        basedir = os.path.join(os.environ['HOME'], ".mnemosyne")

    app = app_factory(opts.ui)
    app.initialise(basedir)
    app.main_widget().start(opts.mode)
    app.finalise()

if __name__ == "__main__":
    sys.exit(main(sys.argv))


# Local Variables:
# mode: python
# py-indent-offset: 4
# indent-tabs-mode: nil
# tab-width: 4
# End:
